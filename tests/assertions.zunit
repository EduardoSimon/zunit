#!/usr/bin/env zunit

@test 'Test _zunit_assert_equals success' {
  run assert 1 equals 1
  assert $state equals 0
  assert $output is_empty
}

@test 'Test _zunit_assert_equals failure' {
  run assert 1 equals 0
  assert $state equals 1
  assert $output same_as "'1' is not equal to '0'"
}

@test 'Test _zunit_assert_not_equal_to success' {
  run assert 1 not_equal_to 0
  assert $state equals 0
  assert $output is_empty
}

@test 'Test _zunit_assert_not_equal_to failure' {
  run assert 1 not_equal_to 1
  assert $state equals 1
  assert $output same_as "'1' is equal to '1'"
}

@test 'Test _zunit_assert_same_as success' {
  run assert 'test' same_as 'test'
  assert $state equals 0
  assert $output is_empty
}

@test 'Test _zunit_assert_same_as failure' {
  run assert 'test' same_as 'wrong'
  assert $state equals 1
  assert $output same_as "'test' is not the same as 'wrong'"
}

@test 'Test _zunit_assert_different_to success' {
  run assert 'test' different_to 'wrong'
  assert $state equals 0
  assert $output is_empty
}

@test 'Test _zunit_assert_different_to failure' {
  run assert 'test' different_to 'test'
  assert $state equals 1
  assert $output same_as "'test' is the same as 'test'"
}

@test 'Test _zunit_assert_is_empty success' {
  run assert '' is_empty
  assert $state equals 0
  assert $output is_empty
}

@test 'Test _zunit_assert_is_empty failure' {
  run assert 'notempty' is_empty
  assert $state equals 1
  assert $output same_as "'notempty' is not empty"
}

@test 'Test _zunit_assert_is_not_empty success' {
  run assert 'notempty' is_not_empty
  assert $state equals 0
  assert $output is_empty
}

@test 'Test _zunit_assert_is_not_empty failure' {
  run assert '' is_not_empty
  assert $state equals 1
  assert $output same_as "value is empty"
}

@test 'Test _zunit_assert_matches success' {
  run assert 'test' matches '[a-z]{4}'
  assert $state equals 0
  assert $output is_empty

  run assert 123 matches '[0-9]+'
  assert $state equals 0
  assert $output is_empty
}

@test 'Test _zunit_assert_matches failure' {
  run assert 'test' matches '[0-9]{4}'
  assert $state equals 1
  assert $output same_as "'test' does not match /[0-9]{4}/"

  run assert 123 matches '[a-z]+'
  assert $state equals 1
  assert $output same_as "'123' does not match /[a-z]+/"
}

@test 'Test _zunit_assert_does_not_match success' {
  run assert 'test' does_not_match '[0-9]+'
  assert $state equals 0
  assert $output is_empty

  run assert 123 does_not_match '[a-z]{4}'
  assert $state equals 0
  assert $output is_empty
}

@test 'Test _zunit_assert_does_not_match failure' {
  run assert 'test' does_not_match '[a-z]{4}'
  assert $state equals 1
  assert $output same_as "'test' matches /[a-z]{4}/"

  run assert 123 does_not_match '[0-9]+'
  assert $state equals 1
  assert $output same_as "'123' matches /[0-9]+/"
}

@test 'Test _zunit_assert_in success' {
  run assert 'a' in 'a' 'b' 'c'
  assert $state equals 0
  assert $output is_empty
}

@test 'Test _zunit_assert_in failure' {
  run assert 'a' in 'x' 'y' 'z'
  assert $state equals 1
  assert $output same_as "'a' is not in (x ; y ; z)"
}

@test 'Test _zunit_assert_not_in success' {
  run assert 'a' not_in 'x' 'y' 'z'
  assert $state equals 0
  assert $output is_empty
}

@test 'Test _zunit_assert_not_in failure' {
  run assert 'a' not_in 'a' 'b' 'c'
  assert $state equals 1
  assert $output same_as "'a' is in (a ; b ; c)"
}

@test 'Test _zunit_assert_exists success' {
  run assert './assertions.zunit' exists
  assert $state equals 0
  assert $output is_empty
}

@test 'Test _zunit_assert_exists failure' {
  run assert './non-existent-file' exists
  assert $state equals 1
  assert $output same_as "'./non-existent-file' does not exist"
}

@test 'Test _zunit_assert_is_file success' {
  run assert './assertions.zunit' is_file
  assert $state equals 0
  assert $output is_empty
}

@test 'Test _zunit_assert_is_file failure' {
  run assert './_support' is_file
  assert $state equals 1
  assert $output same_as "'./_support' does not exist or is not a file"
}

@test 'Test _zunit_assert_is_dir success' {
  run assert './_support' is_dir
  assert $state equals 0
  assert $output is_empty
}

@test 'Test _zunit_assert_is_dir failure' {
  run assert './assertions.zunit' is_dir
  assert $state equals 1
  assert $output same_as "'./assertions.zunit' does not exist or is not a directory"
}

@test 'Test _zunit_assert_is_link success' {
  run assert './_support/assertions.zunit.link' is_link
  assert $state equals 0
  assert $output is_empty
}

@test 'Test _zunit_assert_is_link failure' {
  run assert './assertions.zunit' is_link
  assert $state equals 1
  assert $output same_as "'./assertions.zunit' does not exist or is not a symbolic link"
}

@test 'Test _zunit_assert_is_readable success' {
  run assert './assertions.zunit' is_readable
  assert $state equals 0
  assert $output is_empty
}

@test 'Test _zunit_assert_is_readable failure' {
  # Make file unreadable before checking it
  chmod 000 "$testdir/_support/non-readable-file"

  run assert './_support/non-readable-file' is_readable

  # Change permissions back before the test makes its assertions
  chmod 644 "$testdir/_support/non-readable-file"

  assert $state equals 1
  assert $output same_as "'./_support/non-readable-file' does not exist or is not readable"
}
