#!/usr/bin/env zsh

###
# Assert that two integers are equal
###
function _zunit_assert_equals() {
  local value=$1 comparison=$2

  [[ $value -eq $comparison ]] && return 0

  echo "'$value' is not equal to '$comparison'"
  exit 1
}

###
# Assert that two integers are not equal
###
function _zunit_assert_not_equal_to() {
  local value=$1 comparison=$2

  [[ $value -ne $comparison ]] && return 0

  echo "'$value' is equal to '$comparison'"
  exit 1
}

###
# Assert that two string are the same
###
function _zunit_assert_same_as() {
  local value=$1 comparison=$2

  [[ $value = $comparison ]] && return 0

  echo "'$value' is not the same as '$comparison'"
  exit 1
}

###
# Assert that two string are different
###
function _zunit_assert_different_to() {
  local value=$1 comparison=$2

  [[ $value != $comparison ]] && return 0

  echo "'$value' is the same as '$comparison'"
  exit 1
}

###
# Assert that a value is empty
###
function _zunit_assert_is_empty() {
  local value=$1

  [[ -z ${value[@]} ]] && return 0

  echo "'${value[@]}' is not empty"
  exit 1
}

###
# Assert that a value is not empty
###
function _zunit_assert_is_not_empty() {
  local value=$1

  [[ -n ${value[@]} ]] && return 0

  echo "value is empty"
  exit 1
}

###
# Assert that the value matches a regex pattern
###
function _zunit_assert_matches() {
  local value=$1 pattern=$2

  [[ $value =~ $pattern ]] && return 0

  echo "'$value' does not match /$pattern/"
  exit 1
}

###
# Assert that the value does not match a regex pattern
###
function _zunit_assert_does_not_match() {
  local value=$1 pattern=$2

  [[ ! $value =~ $pattern ]] && return 0

  echo "'$value' matches /$pattern/"
  exit 1
}

###
# Assert that a value is found in an array
###
function _zunit_assert_in() {
  local i found=0 value=$1 array=(${(@)@:2})

  for i in ${(@f)array}; do
    [[ $i = $value ]] && found=1
  done

  [[ $found -eq 1 ]] && return 0

  echo "'$value' is not in (${(@z)array})"
  exit 1
}

###
# Assert that a value is not found in an array
###
function _zunit_assert_not_in() {
  local i found=0 value=$1 array=(${(@)@:2})

  for i in ${(@f)array}; do
    [[ $i = $value ]] && found=1
  done

  [[ $found -eq 0 ]] && return 0

  echo "'$value' is in (${(@z)array})"
  exit 1
}
